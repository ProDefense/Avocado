// Create protobuf messages for communication between the server and implant
syntax = "proto3";
package operatorpb;

// Python (the worst programming language in existence (sadeli's opinion)) stores protobufs 
// as byte objects and will happily deserialize literally anything into any protobuf of any type.
// There's no way to guarantee the type of the protocol buffer without metadata,
// so this "Box" containing type data is a workaround.

message Message {
  enum MessageType {
    Error = 0;
    Registration = 1;
    RegistrationConfirmation = 2;
    ServerCmd = 3;
    ServerCmdOutput = 4;
    SessionInfo = 5;
    SessionConnected = 6;
  }
  MessageType message_type = 1;
  bytes data = 2;
}

message Error {
  enum ErrorType {
    MessageDecode = 0;
    Registration = 1;
    ServerCmd = 2;
    Session = 3;
  }
  ErrorType error_type = 1;
  string message = 2;
}

// Basic info about an operator
message Registration {
  string addr = 1;
  string name = 2;
}

// TODO: Add actual authentication
message RegistrationConfirmation {
  string id = 1;
}

// Command to send to server
message ServerCmd {
  string cmd = 1;
}

// Output from server
message ServerCmdOutput {
  string cmdOutput = 1;
}

// Information about a session
message SessionInfo {
  string id = 1;
  string addr = 2;
  string os = 3;
  uint32 pid = 4;
  // A user/group on a linux machine
  message User {
    uint32 id = 1;
    string name = 2;
  }
  User user = 5; // The user running the implant
  repeated User groups = 6; // The groups this user is a part of
}

// Confirmation that session in connected to operator
message SessionConnected {
  string addr = 1;
}
